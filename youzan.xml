<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tech.youzan.com/</id>
    <title>有赞技术团队</title>
    <updated>2022-02-12T17:37:13.621Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <icon>https://tech.youzan.com/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[逻辑表在OLAP场景下的应用与实现]]></title>
        <id>https://tech.youzan.com/luo-ji-biao-zai-olapchang-jing-xia-de-ying-yong-yu-shi-xian/</id>
        <link href="https://tech.youzan.com/luo-ji-biao-zai-olapchang-jing-xia-de-ying-yong-yu-shi-xian/"/>
        <updated>2022-02-12T09:41:23.079Z</updated>
        <content type="html"><![CDATA[一.背景 数据中心为微商城和零售的商家后台分别建立了一套数据模型、 数据服务， 在此基础上分别建立了一套数据分析的产品体系，随着微商城和零售慢慢往连锁版本融合并伴随着新业务接入，目前的开发模式遇到了以下痛点： 两套数据服务有很多相同之处，重复烟囱式的开发，造成了人力资源浪费，而且开发效率低，从数据开发到最终交付数据服务，需要经历较长的周期；   两套数据模型在指标上存在大量重合，相同的指标的重复开发，增加了开发和维护成本，且存在口径不一致的风险，导致众多线上咨询，损害了商家对数据可靠性的信任。 基于上述痛点，数据应用团队搭建了统一的数据模型和数据服务。本文将介绍在搭建统一数据模型的过程中遇到的问题并给出相应的解决方案。 二.统一数据模型实现 上层的数据分析模型会在某个主题下，…]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[效能指标「研发浓度」在项目度量中的应用]]></title>
        <id>https://tech.youzan.com/development-density-index/</id>
        <link href="https://tech.youzan.com/development-density-index/"/>
        <updated>2022-02-12T09:41:23.081Z</updated>
        <content type="html"><![CDATA[文 | 费解 on 效能改进 1. 背景 在研发管理领域，业界一直在试图寻找可以衡量研发交付效率的指标。常见的指标有：吞吐率（多）、研发周期（快）、资源利用率（省）。然而，在实践中，我们发现，上述三项无法直接作为指导改进的北极星指标： 1）吞吐率，在一段时间内交付项目的个数，是产品需求方关注的指标。若项目未交付，则不落入统计，…]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据测试方法]]></title>
        <id>https://tech.youzan.com/shu-ju-ce-shi-fang-fa/</id>
        <link href="https://tech.youzan.com/shu-ju-ce-shi-fang-fa/"/>
        <updated>2022-02-12T09:41:23.087Z</updated>
        <content type="html"><![CDATA[有赞数据报表中心为商家提供了丰富的数据指标，包括30+页面，100+数据报表以及400+不同类型的数据指标，它们帮助商家更合理、科学地运营店铺，同时也直接提供分析决策方法供商家使用。并且，每天在跑的底层任务和涉及的数据表已经达到千级别。面对如此庞大的数据体系，作为测试如何制定质量保障策略呢？这篇文章将从：1、有赞数据链路 2、数据层测试 3、应用层测试 4、后续规划四个方面展开 一、有赞数据链路 1、…]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis源码解析]]></title>
        <id>https://tech.youzan.com/redisyuan-ma-jie-xi/</id>
        <link href="https://tech.youzan.com/redisyuan-ma-jie-xi/"/>
        <updated>2022-02-12T09:41:23.087Z</updated>
        <content type="html"><![CDATA[一、引言 作为后端开发，redis是工作中最绕不开的中间件之一，在工作中通常有以下几个常用用途 1.缓存，可以抗十万级别的qps  2.计数器，如点赞数，pv等  3.分布式锁  4.限流 另外丰富的redis数据类型支持了一些扩展功能，如排行榜，消息队列，布隆过滤器，位图等等。而redis的底层实现是十分简单的，核心源码也仅有几万行。本文就带大家来领略，小小的redis是如何实现这些复杂功能的~…]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java锁与线程的那些事]]></title>
        <id>https://tech.youzan.com/javasuo-yu-xian-cheng-de-na-xie-shi/</id>
        <link href="https://tech.youzan.com/javasuo-yu-xian-cheng-de-na-xie-shi/"/>
        <updated>2022-02-12T09:41:23.090Z</updated>
        <content type="html"><![CDATA[Java锁与线程的那些事  一.引言 引言：“操作系统的线程状态和java的线程状态有什么关系？”这是校招时被问到的一个问题。当时只顾着看博文、面经等零散的资料，没有形成系统的知识体系，一时语塞，答的不是很对。在网上也没找到足够细致的讲解博文，于是整理出了这篇内容。          Java的线程状态牵扯到了同步语义，要探讨Java的线程状态的，必不可免要回顾其锁机制。因此本文的主要分为两大块：一是Synchronized源码粗析，分析了各类锁的进入、释放、升级过程，并大致说明了monitor原理；二是介绍了线程的实现方式和Java线程状态转换的部分细节。 二. Synchronized锁…]]></content>
    </entry>
</feed>